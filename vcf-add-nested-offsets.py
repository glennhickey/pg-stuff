#!/usr/bin/env python3
"""
Add offsets to off-reference contigs in a VCF, so it becomes compatible
with a Fasta as generated by vg deconstruct -nf
"""

import os, sys
import subprocess
import pysam
import argparse
import shutil
import gzip
from collections import defaultdict
from intervaltree import IntervalTree, Interval
from Bio import SeqIO

def main(command_line=None):                     
    parser = argparse.ArgumentParser('Add offets in VCF as required by FASTA file from vg deconstruct -nf')
    parser.add_argument('--vcf', required=True,
                        help='Input VCF (from vg deconstruct -n)')
    parser.add_argument('--fasta', required=True,
                        help='Input FASTA (from vg decontruct -f)')
    parser.add_argument('--keep-dots', action='store_true', default=False,
                        help='Do not convert dots to underscores in contig names (warning pangenie\'s prepare script needs this)')
    parser.add_argument('--renamed-fasta', 
                        help='Output renamed fasta file')
    options = parser.parse_args(command_line)

    # get all the contig (intervals) from the FASTA and index them
    contig_dict = {}
    f = gzip.open(options.fasta, 'rb') if options.fasta.endswith('.gz') else open(options.fasta, 'r')
    if options.renamed_fasta:
        fo = gzip.open(options.renamed_fasta, 'wb') if options.renamed_fasta.endswith('.gz') else open(options.renamed_fasta, 'w')
    num_records = 0
    for record in SeqIO.parse(f, 'fasta'):
        if '[' in record.id and record.id.endswith(']'):
            contig_name = record.id[:record.id.index('[')]
            if contig_name.endswith('#0'):
                contig_name = contig_name[:-2]
            interval = record.id[record.id.index('[')+1:-1].split('-')
            assert len(interval) == 2
            interval_tree = contig_dict[contig_name] if contig_name in contig_dict else IntervalTree()
            interval_tree[int(interval[0]):int(interval[1])] = record.id
            contig_dict[contig_name] = interval_tree
            num_records += 1
        if options.renamed_fasta:
            if not options.keep_dots:
                record.id = record.id.replace('.', '_')
            record.id = record.id.replace('[', '_').replace(']', '')
            record.description = ''
            SeqIO.write(record, fo, 'fasta')
    f.close()
    fo.close()
            
    sys.stderr.write(f'found {num_records} intervals in {len(contig_dict)} base contigs\n')

    # print the corrected VCF header
    vcf_file = pysam.VariantFile(options.vcf, 'rb' if options.vcf.endswith('.gz') else 'r')
    header = str(vcf_file.header)
    for line in header.split('\n'):
        if line.startswith('##contig=') and line.endswith('>'):
            contig = line[10:-2].split(',')[0][3:]
            fixed_contig = contig if options.keep_dots else contig.replace('.', '_')
            fixed_contig = fixed_contig.replace('[', '_').replace(']', '')
            if contig in contig_dict:
                for interval in contig_dict[contig]:
                    print(f'##contig=<ID={fixed_contig}[{interval.begin}-{interval.end}],length={interval.end-interval.begin}>')
            else:
                sys.stderr.write(f'contig {contig} not in header\n')
                line = line.replace('[', '_').replace(']', '_')
                print(line if options.keep_dots else line.replace('.', '_'))
        else:
            print(line)
            
    # print the corrected records
    for var in vcf_file.fetch():
        if var.contig in contig_dict:
            intervals = list(contig_dict[var.contig].at(var.pos))
            # todo: should we merge these?
            # take biggest interval
            ilens = [(i.end - i.begin) for i in intervals]
            interval = intervals[ilens.index(min(ilens))]
            var_str = '\t'.join([f'{var.contig}[{interval.begin}-{interval.end}]',
                                 str(var.pos - interval.begin)] + str(var).split('\t')[2:])
        else:
            var_str = str(var)
        sys.stdout.write(var_str)

if __name__ == '__main__':
    main()
        
